import{_ as s,c as e,o,a}from"./app.4beb082a.js";const u=JSON.parse('{"title":"Gettext (i18n)","description":"","frontmatter":{},"headers":[],"relativePath":"en/extra/gettext.md","lastUpdated":1657016119000}'),t={name:"en/extra/gettext.md"},l=a(`<h1 id="gettext-i18n" tabindex="-1">Gettext (i18n) <a class="header-anchor" href="#gettext-i18n" aria-hidden="true">#</a></h1><p>Gettext is an i18n tool that is separate from your app&#39;s code. The main benefit over other tools is, just as GResource, being integrated with GTK. Gettext apart from basic 1 on 1 translations, is also able to handle plurals and automatically detect the system&#39;s language.</p><p>You can get the Crystal bindings for it and explore its methods at: <a href="https://github.com/GeopJr/gettext.cr" target="_blank" rel="noopener noreferrer">https://github.com/GeopJr/gettext.cr</a>.</p><p>There are three filetypes associated with it: <code>.pot</code>, <code>.po</code> &amp; <code>.mo</code>. The last one is binary.</p><p>Let&#39;s get started:</p><ul><li><p>Create a <code>po/</code> folder if you haven&#39;t already</p></li><li><p>Create a <code>po/LINGUAS</code> file that includes the language codes of the available translations, one per line</p></li><li><p>Create a <code>po/POTFILES</code> file that includes the paths of the files we should extract strings from (usually all .ui files, metainfo &amp; desktop)</p></li><li><p>Run <code>xgettext</code> to extract the translatable strings into a <code>.pot</code> file - <code>xgettext --files-from=po/POTFILES --output=po/APP_ID.pot</code> - which acts as a &quot;template&quot; for the other translations</p></li><li><p>Create a <code>.po</code> file for a language using <code>msginit</code> eg. <code>msginit -i po/APP_ID.pot -o po/el.po -l el_GR.utf8</code></p></li><li><p>Translate the strings found in the newly created <code>.po</code> file</p></li><li><p>Create a binary <code>.mo</code> using <code>msgfmt</code> eg. <code>msgfmt po/el.po -o po/locale/el/LC_MESSAGES/APP_ID.mo</code></p></li><li><p>Move the <code>po/locale/</code> to <code>/usr/share/locale</code> (not necessary)</p></li><li><p>Add the following to your <code>prerequisites</code>:</p></li></ul><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#FFCB6B;">Gettext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setlocale</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Gettext</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">LC</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ALL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># The macro allows you to set a custom env var during compile time for the mo location eg. \`MY_APP_LOCALE_LOCATION=&quot;./po/locale/&quot;\`</span></span>
<span class="line"><span style="color:#FFCB6B;">Gettext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bindtextdomain</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">APP_ID</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{{</span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MY_APP_LOCALE_LOCATION</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">.nil?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/usr/share/locale</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">env</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MY_APP_LOCALE_LOCATION</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)}})</span></span>
<span class="line"><span style="color:#FFCB6B;">Gettext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">textdomain</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">APP_ID</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><ul><li>Test it by running it with <code>LANG=&quot;el&quot;</code></li></ul><p>You can also add strings that only exist in code in the <code>.pot</code> (and <code>.po</code>) files and then translate them on demand, for instance:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">label </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Gtk</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Label</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">label</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Gettext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gettext</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># LANG=&quot;en&quot; =&gt; &quot;Hello World&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># LANG=&quot;el&quot; =&gt; &quot;\u0393\u03B5\u03B9\u03AC \u03C3\u03BF\u03C5 \u039A\u03CC\u03C3\u03BC\u03B5&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="translating-desktop-and-metainfo-files" tabindex="-1">Translating .desktop and metainfo files <a class="header-anchor" href="#translating-desktop-and-metainfo-files" aria-hidden="true">#</a></h4><p>Translating those files is just as easy, for the sake of not replacing themselves, add the <code>.in</code> extension (<code>APP_ID.dekstop.in</code> &amp; <code>APP_ID.metainfo.xml.in</code>). (Update it in the <code>POTFILES</code> file too).</p><p>Now all you have to do is run:</p><ul><li>For the metainfo file:</li></ul><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ msgfmt --xml --template data/APP_ID.metainfo.xml.in -d &quot;./po&quot; -o data/APP_ID.metainfo.xml</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>For the .desktop file</li></ul><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ msgfmt --desktop --template data/APP_ID.desktop.in -d &quot;./po&quot; -o data/APP_ID.desktop</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You need to have the language you are testing with, installed (<code>locale -a</code>)</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Remember to add <code>*.mo</code> to your <code>.gitignore</code></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Replace <code>APP_ID</code> with your app&#39;s ID</p></div>`,20),n=[l];function p(c,r,i,d,F,D){return o(),e("div",null,n)}var A=s(t,[["render",p]]);export{u as __pageData,A as default};
