import{_ as s,c as a,o as n,a as l}from"./app.4beb082a.js";const i=JSON.parse('{"title":"Rucksack","description":"","frontmatter":{},"headers":[],"relativePath":"en/extra/rucksack.md","lastUpdated":1657016119000}'),p={name:"en/extra/rucksack.md"},o=l(`<h1 id="rucksack" tabindex="-1">Rucksack <a class="header-anchor" href="#rucksack" aria-hidden="true">#</a></h1><p>There are many shards that bundle files into Crystal apps, however <a href="https://github.com/busyloop/rucksack" target="_blank" rel="noopener noreferrer">Rucksack</a> is a bit unique. It doesn&#39;t load them in memory but instead &quot;attaches&quot; them on the binary, allowing you to attach <em>huge</em> files and access them on demand. This, however, requires an extra build step.</p><p>Rucksack needs to generate a &quot;pack&quot; that contains all the files you want to bundle. For the sake of automating the process, I wrote a tiny script that recursively goes through a folder (<code>./data</code> by default) and adds all files that match a set of regex checks to the pack:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#F78C6C;">require</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rucksack</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">EXCLUDE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.+</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">source</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">svg$</span><span style="color:#89DDFF;">/i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">.+</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">?</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">data</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">?.+</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">?$</span><span style="color:#89DDFF;">/i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">.+</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">?</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">cr</span><span style="color:#89DDFF;">/i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">.+</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">?</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">data</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">*$</span><span style="color:#89DDFF;">/i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RucksackHelper</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">extend</span><span style="color:#A6ACCD;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_paths</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Path</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Dir</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">each_child </span><span style="color:#89DDFF;font-style:italic;">do </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">      child_path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Path</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> child</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directory?</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">child_path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_paths</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">child_path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">next</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">next</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">unless</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EXCLUDE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">all? </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex </span><span style="color:#89DDFF;">=~</span><span style="color:#A6ACCD;"> child_path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">expand</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">to_s</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">.nil?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">raise</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">#{</span><span style="color:#A6ACCD;">child_path</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is not a file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">unless</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">file?</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">child_path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      result </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> child_path</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RucksackHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_paths</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">data/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">each </span><span style="color:#89DDFF;font-style:italic;">do </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">rucksack</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">to_s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>Rucksack has a set of env vars that determine its runtime behavior from 0 to 2, 0 being forgiving and 2 being paranoid.</p><p>We want to set it to 1 during release builds and leave it as 0 during development. We can achieve it with macros:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{%</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">flag?</span><span style="color:#89DDFF;">(:debug)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flag?</span><span style="color:#89DDFF;">(:release)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ENV[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">RUCKSACK_MODE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">||=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">{%</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%}</span></span>
<span class="line"></span></code></pre></div><p>We can also run the script with macros so it generates it every time it compiles:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../data/scripts/generate_rucksack.cr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)}}</span></span>
<span class="line"></span></code></pre></div><p>To read a file, all you have to do is pass an IO to rucksack:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">css_data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IO</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Memory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">new</span></span>
<span class="line"><span style="color:#82AAFF;">rucksack</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./data/css/style.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">css_data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>As mentioned previously, there&#39;s an additional step. You need to append the rucksack pack to the binary:</p><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">cat .rucksack </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> ./my-app</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>Keep in mind that it has to be at the end of the binary. When packaging, additional debug info might be appended to the binary and prevent rucksack from working. You can avoid that on flatpak by passing the following build-options:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">build-options</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">strip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">no-debuginfo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span></code></pre></div><p>Rucksack provides additional methods, exceptions and more, please read its <a href="https://github.com/busyloop/rucksack#readme" target="_blank" rel="noopener noreferrer">README</a>.</p>`,16),e=[o];function t(c,r,D,y,F,C){return n(),a("div",null,e)}var d=s(p,[["render",t]]);export{i as __pageData,d as default};
