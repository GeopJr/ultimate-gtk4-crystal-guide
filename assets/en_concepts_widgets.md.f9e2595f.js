import{_ as e,c as t,o as a,a as o}from"./app.4beb082a.js";const f=JSON.parse('{"title":"Widgets","description":"","frontmatter":{},"headers":[],"relativePath":"en/concepts/widgets.md","lastUpdated":1657016119000}'),r={name:"en/concepts/widgets.md"},i=o('<h1 id="widgets" tabindex="-1">Widgets <a class="header-anchor" href="#widgets" aria-hidden="true">#</a></h1><p>Widgets are premade components with properties, styles &amp; signals. They can be usually put in one of the following categories:</p><ul><li><p><code>Toplevel</code> - Windows, dialogs and their variants</p></li><li><p><code>Containers</code>/<code>Layout</code> - Boxes, frames, viewports, popups etc.</p></li><li><p><code>Control</code> - Switches, buttons, text inputs etc.</p></li><li><p><code>Display</code> - Images, icons, labels, textviews, spinners etc.</p></li></ul><p>Widgets follow OOP, meaning that they inherit properties, signals and others.</p><p><a href="https://valadoc.org/" target="_blank" rel="noopener noreferrer">Valadoc</a> has beautiful interactive diagrams that explain the hierarchy of each widget, for example <a href="https://valadoc.org/gtk4/Gtk.Switch.html" target="_blank" rel="noopener noreferrer"><code>Gtk.Switch</code></a>.</p><p>On Crystal, while we don&#39;t generate fancy diagrams, each widget includes all the methods (which includes properties &amp; signals) all the way back to <code>GObject::Object</code>, for example <a href="https://hugopl.github.io/gtk4.cr/Gtk/Switch.html" target="_blank" rel="noopener noreferrer"><code>Gtk::Switch</code></a>.</p>',6),s=[i];function n(c,l,d,p,h,g){return a(),t("div",null,s)}var m=e(r,[["render",n]]);export{f as __pageData,m as default};
