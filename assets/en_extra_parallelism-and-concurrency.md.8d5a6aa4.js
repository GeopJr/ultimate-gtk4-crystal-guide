import{_ as s,c as n,o as a,a as l}from"./app.4beb082a.js";const A=JSON.parse('{"title":"Parallelism & Concurrency","description":"","frontmatter":{},"headers":[],"relativePath":"en/extra/parallelism-and-concurrency.md","lastUpdated":1657016119000}'),e={name:"en/extra/parallelism-and-concurrency.md"},o=l(`<h1 id="parallelism-concurrency" tabindex="-1">Parallelism &amp; Concurrency <a class="header-anchor" href="#parallelism-concurrency" aria-hidden="true">#</a></h1><p>Without going too much into detail, the main thread is occupied by the main loop, blocking it for any reason <strong>HAS</strong> to be avoided. Blocking it will result in your app being in a &quot;Frozen&quot; state. Any expensive code should run in a different thread.</p><p>Crystal has made many <a href="https://crystal-lang.org/2019/09/06/parallelism-in-crystal.html" target="_blank" rel="noopener noreferrer">improvements to parallelism</a> over the years, to enable it you need to pass the <code>-Dpreview_mt</code> flag when building (or running with <code>crystal run</code>) your app.</p><p>To achieve concurrency we use <a href="https://crystal-lang.org/reference/1.3/guides/concurrency.html" target="_blank" rel="noopener noreferrer">fibers</a>. Fibers by default spawn in the same thread, however that changes with <code>-Dpreview_mt</code>, fibers can now spawn in any of the threads.</p><p>While that&#39;s awesome, there&#39;s a problem when used with GTK - they can still spawn in the main/blocked/occupied thread. To bypass this I created <a href="https://github.com/GeopJr/non-blocking-spawn" target="_blank" rel="noopener noreferrer">non-blocking-spawn</a>, a copy of the top level spawn method that when <code>same_thread</code> is false, uses any BUT the current thread.</p><p>Since it touches private interfaces it&#39;s better to understand what it does before blindly using.</p><p>The default, top level spawn:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spawn</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">, name </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">? </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">, same_thread </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">, </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  fiber </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> same_thread</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber</span><span style="color:#89DDFF;">.@</span><span style="color:#A6ACCD;">current_thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Crystal</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Scheduler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">  fiber</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><ul><li>Creates a fiber</li><li>If same_thread is true, sets the fiber&#39;s thread to the current one</li><li>Lets Scheduler handle it and returns it</li></ul><p>The non-blocking-spawn one:</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spawn</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">, name </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">? </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;">, same_thread </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">, </span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> same_thread</span></span>
<span class="line"><span style="color:#A6ACCD;">      fiber</span><span style="color:#89DDFF;">.@</span><span style="color:#A6ACCD;">current_thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">      non_blocking_threads </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> threads</span></span>
<span class="line"><span style="color:#A6ACCD;">      fiber</span><span style="color:#89DDFF;">.@</span><span style="color:#A6ACCD;">current_thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">non_blocking_threads</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sample</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">unless</span><span style="color:#A6ACCD;"> non_blocking_threads</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Crystal</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Scheduler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">threads</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  threads </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Thread</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">unsafe_each </span><span style="color:#89DDFF;font-style:italic;">do </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">thread</span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">next</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> thread </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span></span>
<span class="line"><span style="color:#A6ACCD;">    threads </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> thread</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">  threads</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div><p>The <code>Non::Blocking#threads</code> method:</p><ul><li>Creates an array of Thread</li><li>Goes through all available threads and returns all but the current one</li></ul><p>The <code>Non::Blocking#spawn</code> method:</p><ul><li>Exactly the same as the top level one but when <code>same_thread</code> is false, it sets the fiber&#39;s thread to a random one from <code>Non::Blocking#threads</code> (any but the current one) if available, else lets Scheduler to handle it</li></ul><p>With those two functions, not only can we spawn in any but the current thread but also handle the event of no threads being available (<code>Non::Blocking#threads == 0</code>):</p><div class="language-crystal"><span class="copy"></span><pre><code><span class="line"><span style="color:#F78C6C;">require</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">non-blocking-spawn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Non</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Blocking</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">threads </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">seconds</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Non</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Blocking</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">spawn </span><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3600</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">seconds</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span></code></pre></div>`,17),p=[o];function t(r,c,y,D,F,i){return a(),n("div",null,p)}var d=s(e,[["render",t]]);export{A as __pageData,d as default};
